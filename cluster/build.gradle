apply plugin: 'scala'
apply plugin: 'com.github.johnrengelman.shadow'

compileScala.options.encoding = 'UTF-8'

// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir 'src/main/java'
sourceSets.test.scala.srcDirs = [ 'src/test/java', 'src/test/scala',
                                  'src/dunit/java', 'src/dunit/scala' ]
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = [ ]

dependencies {
  compile 'org.scala-lang:scala-library:' + scalaVersion
  compile 'org.scala-lang:scala-reflect:' + scalaVersion
  compile 'org.scala-lang:scala-compiler:' + scalaVersion
  compile project(':snappy-core_' + scalaBinaryVersion)
  compile group: 'org.apache.zeppelin', name: 'zeppelin-interpreter', version: '0.6.0'
  compile group: 'org.apache.zeppelin', name: 'zeppelin-spark', version: '0.6.0'
  compile group: 'org.apache.zeppelin', name: 'zeppelin-jdbc', version: '0.6.0'
  if (new File(rootDir, 'spark/build.gradle').exists()) {
    compile project(':snappy-spark:snappy-spark-core_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-catalyst_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-sql_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-hive_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-repl_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming-kafka_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming-twitter_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-mllib_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-yarn_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-graphx_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-hive-thriftserver_' + scalaBinaryVersion)
  } else {
    compile 'io.snappydata:snappy-spark-core_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-catalyst_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-sql_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-hive_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-repl_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-streaming_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-streaming-kafka_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-streaming-twitter_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-mllib_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-yarn_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-graphx_' + scalaBinaryVersion + ':' + snappySparkVersion
    compile 'io.snappydata:snappy-spark-hive-thriftserver_' + scalaBinaryVersion + ':' + snappySparkVersion
  }

  if (new File(rootDir, 'store/build.gradle').exists()) {
    testCompile project(path: ':snappy-store:gemfirexd-tools', configuration: 'testOutput')
  } else {
    testCompile group: 'io.snappydata', name: 'snappydata-store-tools', version: snappyStoreVersion, classifier: 'tests'
  }
  if (new File(rootDir, 'spark-jobserver/build.gradle').exists()) {
    compile project(':spark-jobserver_' + scalaBinaryVersion)
  } else {
    compile group: 'io.snappydata', name: 'spark-jobserver_' + scalaBinaryVersion, version: '0.6.1'
  }

  testCompile project(':dunit')
  testCompile project(path: ':snappy-core_' + scalaBinaryVersion, configuration: 'testOutput')
  //Uncomment after AQP merge
/*
  if (new File(rootDir, 'aqp/build.gradle').exists()) {
    testCompile project(":snappy-aqp_${scalaBinaryVersion}")
  } else {
    testCompile "io.snappydata:snappy-aqp_${scalaBinaryVersion}:${version}"
  }
*/
  testCompile 'org.scalatest:scalatest_' + scalaBinaryVersion + ':2.2.6'

  testRuntime 'org.pegdown:pegdown:1.1.0'
}

// Creates the version properties file and writes it to the resources dir
task createVersionPropertiesFile(dependsOn: 'processResources') {
  def propertiesDir = file("${buildDir}/resources/main/io/snappydata")
  outputs.file "${propertiesDir}/SnappyDataVersion.properties"
  inputs.dir compileJava.destinationDir

  doLast {

    def props = [
      "Product-Name"      : productName,
      "Product-Version"   : version,
      "Build-Id"          : System.env.USER + ' ' + buildNumber,
      "Build-Date"        : buildDate,
      "Build-Platform"    : osName.getName() + osVersion + osArch,
      "Build-Java-Version": jdkVersion,
      "Source-Date"       : sourceDate,
      "Source-Revision"   : commitId,
      "Source-Repository" : gitBranch,
    ]

   writeProperties(propertiesDir, 'SnappyDataVersion.properties',
        "Properties that control what version ${productName} will think it is. Changing these values may cause ${productName} to no longer function.", props)
  }
}

compileJava.dependsOn createVersionPropertiesFile


task packageScalaDocs(type: Jar, dependsOn: scaladoc) {
  classifier = 'javadoc'
  from scaladoc
}
if (rootProject.hasProperty('enablePublish')) {
  artifacts {
    archives packageScalaDocs, packageSources
  }
}

testClasses.doLast {
  copyTestsCommonResources(buildDir)
}

task deleteDocsDir(type: Delete) {
  delete "${rootProject.buildDir}/docs"
}

task docs(type: ScalaDoc) {
  dependsOn deleteDocsDir
  Set<String> allSource = []
  def docProjects = rootProject.subprojects.collectMany { project ->
    if ((project.plugins.hasPlugin('scala') || project.plugins.hasPlugin('java')) &&
        // jobserver depends on Apache Spark 1.5.x which causes conflicts
        !project.path.contains('snappy-store') &&
        !project.name.contains('jobserver') &&
        // below three will get filtered with the snappy-store path check itself
        // but still keeping it as when we would remove the snappy-store path filter
        // still the below three sub prejects should not be built.
        !project.name.contains('jgroups') &&
        !project.name.contains('gemfire-examples') &&
        !project.name.contains('trove') &&
        // exclude tests
        !project.name.contains('tests')) {
      allSource.addAll(project.sourceSets.main.allJava.findAll {
        !it.getPath().matches('.*/internal/.*') && !it.getPath().contains('com/gemstone/gemfire/cache/operations/')
      })
      if (project.plugins.hasPlugin('scala')) {
        allSource.addAll(project.sourceSets.main.allScala.findAll {
          !it.getPath().matches('.*org/apache/spark/sql/execution/joins/HashedRelation.*') 
        })
      }
      [ project ]
    } else []
  }
  source = allSource
  classpath = files(docProjects.collect { project ->
    // println("Got project = $project")
    project.sourceSets.main.compileClasspath
  })
  destinationDir = file("${rootProject.buildDir}/docs")
}

def copyDirs(def srcDir, def destDir) {
  mkdir(destDir)
  copy {
    from srcDir
    into destDir
  }
}

test.dependsOn ':cleanJUnit'
scalaTest {
  dependsOn ':cleanScalaTest'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}
check.dependsOn test, scalaTest, dunitTest

shadowJar {
  zip64 = true

  //inputs.files jar.outputs.files
  //outputs.file "${buildDir}/libs/${archiveName}"

  mergeServiceFiles {
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
  }
  append('META-INF/services/org.apache.hadoop.fs.FileSystem')
  append('reference.conf')
  exclude 'org/datanucleus/**'
  exclude 'log4j.properties'

  if (rootProject.hasProperty('enablePublish')) {
    createdBy = "SnappyData Build Team"
  } else {
    createdBy = System.getProperty("user.name")
  }
  manifest {
    attributes(
      "Manifest-Version"  : "1.0",
      "Created-By"        : createdBy,
      "Title"             : rootProject.name,
      "Version"           : version,
      "Vendor"            : "SnappyData, Inc."
    )
  }
}


task generateSnappydataZeppelinInterpreterJar(type: Jar, dependsOn: compileScala) {

  //from sourceSets.main.output.classesDir
  //from sourceSets.main.output.resourcesDir
  //from sourceSets.main.resources.srcDirs
 // from 'src/main/resources/snappydata'
  zip64 = true
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from sourceSets.main.output.classesDir
  jar.includeEmptyDirs = false
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
  from('src/main/resources/snappydata'){
    include 'interpreter-setting.json'
    include 'ansi.sql.keywords'
  }
  jar.includeEmptyDirs = false

  include 'org/apache/zeppelin/spark/**'
  include 'org/apache/zeppelin/jdbc/**'
  include 'org/apache/zeppelin/scheduler/**'
  include 'org/apache/zeppelin/interpreter/**'
  include 'com/google/**'
  include 'org/slf4j/**'
  include 'jline/console/**'
  include 'jline/internal/**'
  include 'jline/**'
  include 'org/apache/commons/lang/**'

  include 'org/apache/zeppelin/interpreter/**'
 // exclude 'org/apache/zeppelin/interpreter/SnappydataSqlZeppelinInterpreter**'
  archiveName 'snappydata-zeppelin-interpreter-'+version+'.jar'
}

